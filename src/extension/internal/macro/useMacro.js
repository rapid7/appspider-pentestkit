import {
    useState,
    useEffect,
    useCallback,
} from 'react';

import { ptk_controller_macro } from '../../browser/assets/js/controller/macro';

const controller = new ptk_controller_macro({
    format: 'xml',
});

const useMacroRecorder = () => {
    const [macro, setMacro] = useState('');
    const [url, setUrl] = useState('');

    useEffect(() => {
        document.addEventListener('export', () => {
            setMacro(controller.export());
        });

        browser.runtime.onMessage.addListener(message => {
            if (message.channel === 'ptk_background2popup_recorder' && message.type === 'recording_completed') {
                controller.recording = message.recording;
                const exportEvt = new Event('export');

                document.dispatchEvent(exportEvt);
            }
        });

        controller.init().then(result => {
            controller.getSettings().then(() => {
                if (result.savedMacro) {
                    setMacro(result.savedMacro);
                } else {
                    const exportEvt = new Event('export');

                    document.dispatchEvent(exportEvt);
                }
            });
        });

        browser.tabs.query({
            currentWindow: true, active: true,
        }).then(tabs => {
                const tab = tabs[ 0 ];

                if (tab && !tab.url.startsWith('chrome://')) {
                    setUrl(tab.url);
                }
        });
    }, []);

    const startRecording = useCallback(({ clearCookies }) => () => {
        controller.start(clearCookies, url).then(response => {
            console.log(response);
        });
    }, [url]);

    return {
        macro,
        url,
        setMacro,
        setUrl,
        startRecording,
    };
};

export { useMacroRecorder };
