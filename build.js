import { createRequire } from 'module'
const require = createRequire(import.meta.url)
const file_system = require('fs')
let archiver = require('archiver')


let manifest = JSON.parse(file_system.readFileSync('src/extension/manifest.json', 'utf8'))
let manifestOrigin = JSON.parse(file_system.readFileSync('src/extension/manifest.json', 'utf8'))

//Chrome
let output = file_system.createWriteStream('dist/chrome_' + manifest.version + '.zip')
let archive = archiver('zip')
output.on('close', function () {
    console.log(archive.pointer() + ' total bytes')
    console.log('archiver has been finalized and the output file descriptor has closed.')
})
archive.on('error', function (err) {
    throw err
})
archive.pipe(output)
archive.directory('src/extension/', false)
archive.finalize()


await new Promise(resolve => {
    setTimeout(resolve, 3000)
  })
// Firefox 
manifest.permissions = manifest.permissions.filter(item => (item != 'background' && item != 'debugger'))
file_system.writeFileSync('src/extension/manifest.json', JSON.stringify(manifest, null, 4))
output = file_system.createWriteStream('dist/firefox_' + manifest.version + '.zip')
archive = archiver('zip')
output.on('close', function () {
    console.log(archive.pointer() + ' total bytes')
    console.log('archiver has been finalized and the output file descriptor has closed.')
})
archive.on('error', function (err) {
    throw err
})
archive.pipe(output)
archive.directory('src/extension/', false)
archive.finalize()

await new Promise(resolve => {
    setTimeout(resolve, 3000)
  })
file_system.writeFileSync('src/extension/manifest.json', JSON.stringify(manifestOrigin, null, 4))
