'use strict';

var debug = false;
//---------------------------------------------------------------------------
var TestRecorder = {};
// if (typeof(TestRecorder) == "undefined") {
//     TestRecorder = {};
// }

//---------------------------------------------------------------------------
//Browser -- a singleton that provides a cross-browser API for managing event 
//handlers and miscellaneous browser functions.

//Methods:

//captureEvent(window, name, handler) -- capture the named event occurring
//in the given window, setting the function handler as the event handler.
//The event name should be of the form "click", "blur", "change", etc. 

//releaseEvent(window, name, handler) -- release the named event occurring
//in the given window. The event name should be of the form "click", "blur",
//"change", etc. 

//getSelection(window) -- return the text currently selected, or the empty
//string if no text is currently selected in the browser.

//---------------------------------------------------------------------------

if (typeof(TestRecorder.Browser) == "undefined") {
    TestRecorder.Browser = {};
}

TestRecorder.Browser.captureEvent = function(wnd, name, func) {
    var lname = name.toLowerCase();
    var doc = wnd.document;
    wnd.captureEvents(Event[name.toUpperCase()]);
    wnd["on" + lname] = func;
}

TestRecorder.Browser.releaseEvent = function(wnd, name, func) {
    var lname = name.toLowerCase();
    var doc = wnd.document;
    wnd.releaseEvents(Event[name.toUpperCase()]);
    wnd["on" + lname] = null;
}

TestRecorder.Browser.getSelection = function(wnd) {
    var doc = wnd.document;
    if (wnd.getSelection) {
        return wnd.getSelection() + "";
    } else if (doc.getSelection) {
        return doc.getSelection() + "";
    } else if (doc.selection && doc.selection.createRange) {
        return doc.selection.createRange().text + "";
    }
    return "";
}

TestRecorder.Browser.windowHeight = function(wnd) {
    var doc = wnd.document;
    if (wnd.innerHeight) {
        return wnd.innerHeight;
    } else if (doc.documentElement && doc.documentElement.clientHeight) {
        return doc.documentElement.clientHeight;
    } else if (document.body) {
        return document.body.clientHeight;
    }
    return -1;
}

TestRecorder.Browser.windowWidth = function(wnd) {
    var doc = wnd.document;
    if (wnd.innerWidth) {
        return wnd.innerWidth;
    } else if (doc.documentElement && doc.documentElement.clientWidth) {
        return doc.documentElement.clientWidth;
    } else if (document.body) {
        return document.body.clientWidth;
    }
    return -1;
}


//---------------------------------------------------------------------------
//Event -- a class that provides a cross-browser API dealing with most of the
//interesting information about events.

//Methods:

//type() -- returns the string type of the event (e.g. "click")

//target() -- returns the target of the event

//button() -- returns the mouse button pressed during the event. Because
//it is not possible to reliably detect a middle button press, this method 
//only recognized the left and right mouse buttons. Returns one of the  
//constants Event.LeftButton, Event.RightButton or Event.UnknownButton for 
//a left click, right click, or indeterminate (or no mouse click).

//keycode() -- returns the index code of the key pressed. Note that this 
//value may differ across browsers because of character set differences. 
//Whenever possible, it is suggested to use keychar() instead.

//keychar() -- returns the char version of the key pressed rather than a 
//raw numeric code. The resulting value is subject to all of the vagaries 
//of browsers, character encodings in use, etc.

//shiftkey() -- returns true if the shift key was pressed.

//posX() -- return the X coordinate of the mouse relative to the document.

//posY() -- return the y coordinate of the mouse relative to the document.

//stopPropagation() -- stop event propagation (if supported)

//preventDefault() -- prevent the default action (if supported)

//---------------------------------------------------------------------------

TestRecorder.Event = function(e) {
    this.event = (e) ? e : window.event;
    this.eventStart = (new Date()).getTime();
}

TestRecorder.Event.LeftButton = 0;
TestRecorder.Event.MiddleButton = 1;
TestRecorder.Event.RightButton = 2;
TestRecorder.Event.UnknownButton = 3;

TestRecorder.Event.prototype.stopPropagation = function() {
    if (this.event.stopPropagation)
        this.event.stopPropagation();
}

TestRecorder.Event.prototype.preventDefault = function() {
    if (this.event.preventDefault)
        this.event.preventDefault();
}

TestRecorder.Event.prototype.type = function() {
    return this.event.type;
}

TestRecorder.Event.prototype.button = function() {
    if (this.event.button) {
        if (this.event.button == 2) {
            return TestRecorder.Event.RightButton;
        }
        return TestRecorder.Event.LeftButton;
    } else if (this.event.which) {
        if (this.event.which > 1) {
            return TestRecorder.Event.RightButton;
        }
        return TestRecorder.Event.LeftButton;
    }
    return TestRecorder.Event.UnknownButton;
}

TestRecorder.Event.prototype.target = function() {
    var t = (this.event.target) ? this.event.target : this.event.srcElement;
    if (t && t.nodeType == 3) // safari bug
        return t.parentNode;
    return t;
}

TestRecorder.Event.prototype.keycode = function() {
    return (this.event.keyCode) ? this.event.keyCode : this.event.which;
}

TestRecorder.Event.prototype.keychar = function() {
    return String.fromCharCode(this.keycode());
}

TestRecorder.Event.prototype.shiftkey = function() {
    if (this.event.shiftKey)
        return true;
    return false;
}

TestRecorder.Event.prototype.posX = function() {
    if (this.event.pageX)
        return this.event.pageX;
    else if (this.event.clientX) {
        return this.event.clientX + document.body.scrollLeft;
    }
    return 0;
}

TestRecorder.Event.prototype.posY = function() {
    if (this.event.pageY)
        return this.event.pageY;
    else if (this.event.clientY) {
        return this.event.clientY + document.body.scrollTop;
    }
    return 0;
}



//---------------------------------------------------------------------------
//TestCase -- this class contains the interesting events that happen in 
//the course of a test recording and provides some testcase metadata.

//Attributes:

//items -- an array of objects representing test actions and checks


//---------------------------------------------------------------------------

TestRecorder.TestCase = function() {
    this.items = new Array();
    this.recorderTimer = (new Date()).getTime();
}

TestRecorder.TestCase.prototype.append = function(item) {
    item.eventDuration = item.eventStart - this.recorderTimer;
    if (this.items.length == 1) { //change open url duration
        var duration = item.eventStart - this.items[0].eventStart;
        //if (duration < recorder.minDuration) duration = recorder.minDuration + duration;
        this.items[0].eventDuration = duration
    } else {
        this.recorderTimer = (new Date()).getTime();
    }

    //if (item.eventDuration < recorder.minDuration) item.eventDuration = recorder.minDuration + item.eventDuration;
    this.items[this.items.length] = item;
    var message = {
        channel: 'ptkRecorderToBackground',
        data: {
            function: 'append',
            items: this.items,
            parameters: {}
        }
    };
    if (debug) {
        console.log('append');
        console.log(message.data.items);
    }

    chrome.runtime.sendMessage(message);
}

TestRecorder.TestCase.prototype.peek = function() {
    return this.items[this.items.length - 1];
}

TestRecorder.TestCase.prototype.poke = function(o) {
    this.items[this.items.length - 1] = o;
    chrome.runtime.sendMessage({ action: "poke", obj: o });
}


//---------------------------------------------------------------------------
//Event types -- whenever an interesting event happens (an action or a check)
//it is recorded as one of the object types defined below. All events have a
//'type' attribute that marks the type of the event (one of the values in the
//EventTypes enumeration) and different attributes to capture the pertinent 
//information at the time of the event.
//---------------------------------------------------------------------------

if (typeof(TestRecorder.EventTypes) == "undefined") {
    TestRecorder.EventTypes = {};
}

TestRecorder.EventTypes.OpenUrl = 0;
TestRecorder.EventTypes.Click = 1;
TestRecorder.EventTypes.KeyPress = 2;
TestRecorder.EventTypes.Tab = 3;

TestRecorder.EventTypes.MouseDown = 10;
TestRecorder.EventTypes.MouseUp = 11;
TestRecorder.EventTypes.Paste = 12;

//TestRecorder.EventTypes.Change = 2;
//TestRecorder.EventTypes.Submit = 4;


/*
TestRecorder.EventTypes.Comment = 3;
TestRecorder.EventTypes.CheckPageTitle = 5;
TestRecorder.EventTypes.CheckPageLocation = 6;
TestRecorder.EventTypes.CheckTextPresent = 7;
TestRecorder.EventTypes.CheckValue = 8;
TestRecorder.EventTypes.CheckValueContains = 9;
TestRecorder.EventTypes.CheckText = 10;
TestRecorder.EventTypes.CheckHref = 11;
TestRecorder.EventTypes.CheckEnabled = 12;
TestRecorder.EventTypes.CheckDisabled = 13;
TestRecorder.EventTypes.CheckSelectValue = 14;
TestRecorder.EventTypes.CheckSelectOptions = 15;
TestRecorder.EventTypes.CheckImageSrc = 16;
TestRecorder.EventTypes.PageLoad = 17;
TestRecorder.EventTypes.ScreenShot = 18;
TestRecorder.EventTypes.MouseDown = 19;
TestRecorder.EventTypes.MouseUp = 20;
TestRecorder.EventTypes.MouseDrag = 21;
TestRecorder.EventTypes.MouseDrop = 22;
TestRecorder.EventTypes.KeyPress = 23;
*/

TestRecorder.ElementInfo = function(element) {
    this.action = element.action;
    this.method = element.method;
    this.href = element.href;
    this.tagName = element.tagName;
    this.value = element.value != undefined ? element.value : element.innerText;
    this.checked = element.checked;
    this.name = element.name;
    this.type = element.type;
    if (this.type)
        this.type = this.type.toLowerCase();
    if (element.form)
        this.form = { id: element.form.id, name: element.form.name };
    this.src = element.src;
    this.id = element.id;
    this.title = element.title;
    this.options = [];
    if (element.selectedIndex) {
        for (var i = 0; i < element.options.length; i++) {
            var o = element.options[i];
            this.options[i] = { text: o.text, value: o.value };
        }
    }
    this.label = this.findLabelText(element);
    this.xpath = this.getXPath(element);
    this.fullxpath = this.getElementTreeXPath(element);
    this.javascript = this.getElementJavascript(element);
}

TestRecorder.ElementInfo.prototype.findLabelText = function(element) {
    var label = this.findContainingLabel(element)
    var text;
    if (!label) {
        label = this.findReferencingLabel(element);
    }
    if (label) {
        text = label.innerHTML;
        // remove newlines
        text = text.replace('\n', ' ');
        // remove tags
        text = text.replace(/<[^>]*>/g, ' ');
        // remove non-alphanumeric prefixes or suffixes
        text = text.replace(/^\W*/mg, '')
        text = text.replace(/\W*$/mg, '')
        // remove extra whitespace
        text = text.replace(/^\s*/, '').replace(/\s*$/, '').replace(/\s+/g, ' ');
    }

    return text;
}

TestRecorder.ElementInfo.prototype.findReferencingLabel = function(element) {
    var labels = window.document.getElementsByTagName('label')
    for (var i = 0; i < labels.length; i++) {
        if (labels[i].attributes['for'] &&
            labels[i].attributes['for'].value == element.id)
            return labels[i]
    }
}

TestRecorder.ElementInfo.prototype.findContainingLabel = function(element) {
    var parent = element.parentNode;
    if (!parent)
        return undefined;
    if (parent.tagName && parent.tagName.toLowerCase() == 'label')
        return parent;
    else
        return this.findContainingLabel(parent);
}

TestRecorder.ElementInfo.prototype.getXPath = function(element) {
    var iframeXpath = '';
    if (iframeName && iframeName != null) {
        iframeXpath = 'xpath=//IFRAME[@id="' + iframeName + '"]|||>';
    }
    // if (recorder.useFullPath)
    //     return iframeXpath + 'xpath=' + this.getElementTreeXPath(element);

    if (element) {
        var itemIndex = '';
        var options = element.id ? this.getElementsById(element) : document.getElementsByName(element.name);
        for (var i = 0; i < options.length; i++) {
            if (i > 0 && options[i].value == element.value) {
                itemIndex = '[' + i + ']';
            }
        }
        if (element.id)
            return iframeXpath + 'xpath=//' + element.nodeName.toUpperCase() + '[@id="' + element.id + '"]' + itemIndex;
        if (element.name)
            return iframeXpath + 'xpath=//' + element.nodeName.toUpperCase() + '[@name="' + element.name + '"]' + itemIndex;
    }
    return this.getElementTreeXPath(element);
}

TestRecorder.ElementInfo.prototype.getElementTreeXPath = function(element) {
    var paths = [];

    // Use nodeName (instead of localName) so namespace prefix is included (if any).
    for (; element && element.nodeType == 1; element = element.parentNode) {
        if (element.previousSibling != null && element.previousSibling.nodeType == Node.DOCUMENT_TYPE_NODE) {
            break;
        }
        var index = 0;
        for (var sibling = element.previousSibling; sibling; sibling = sibling.previousSibling) {
            if (sibling.nodeType == Node.DOCUMENT_TYPE_NODE)
                continue;

            if (sibling.nodeName == element.nodeName) {
                ++index;
            }
            //first element with ID is enough
            // if (element.id && !recorder.useFullPath) {
            //     return '//' + element.nodeName + '[@id="' + element.id + '"]' + (paths.length ? "/" + paths.join("/").toUpperCase() : null);
            // }
        }

        var tagName = element.nodeName.toLowerCase();
        var pathIndex = (index ? "[" + (index) + "]" : "");
        paths.splice(0, 0, tagName + pathIndex);
    }

    return paths.length ? "xpath=/" + paths.join("/").toUpperCase() : null;
}

TestRecorder.ElementInfo.prototype.getElementJavascript = function(element) {
    return "document.getElementsById().click()";
}

TestRecorder.ElementInfo.prototype.getElementsById = function(item) {
    var returnElements = new Array();
    var elements = document.getElementsByTagName(item.tagName);
    var id = item.id.replace(/-/g, "\-");

    var regExp = new RegExp("(^|\s)" + id + "(\s|$)");

    for (var i = 0; i < elements.length; i++) {
        var element = elements[i];
        if (element.id.indexOf(id) != -1) {
            returnElements.push(element);
        }
    }

    return returnElements;
}


TestRecorder.DocumentEvent = function(type, target) {
    this.type = type;
    this.url = target.URL;
    this.title = target.title;
    this.eventStart = (new Date()).getTime();
}

TestRecorder.ElementEvent = function(type, target, text) {
    this.type = type;
    this.info = new TestRecorder.ElementInfo(target);
    this.text = text; // ? text : recorder.strip(contextmenu.innertext(target));
    this.eventStart = (new Date()).getTime();
}

TestRecorder.KeyEvent = function(target, text) {
    this.type = TestRecorder.EventTypes.KeyPress;
    this.info = new TestRecorder.ElementInfo(target);
    this.text = text;
    this.eventStart = (new Date()).getTime();
}

TestRecorder.OpenURLEvent = function(url) {
    this.type = TestRecorder.EventTypes.OpenUrl;
    this.url = url;
    this.width = window.innerWidth;
    this.height = window.innerHeight;
    this.eventStart = (new Date()).getTime();
}

TestRecorder.TabEvent = function(type, target) {
    this.type = TestRecorder.EventTypes.Tab;
    this.eventStart = (new Date()).getTime();
}

TestRecorder.PageLoadEvent = function(url) {
    this.type = TestRecorder.EventTypes.OpenUrl;
    this.url = url;
    this.viaBack = back
}

TestRecorder.MouseEvent = function(type, target, x, y) {
    this.type = type;
    this.info = new TestRecorder.ElementInfo(target);
    this.x = x;
    this.y = y;
    this.eventStart = (new Date()).getTime();
}


//---------------------------------------------------------------------------
//Recorder -- a controller class that manages the recording of web browser
//activities to produce a test case.

//Instance Methods:

//start() -- start recording browser events.

//stop() -- stop recording browser events.

//reset() -- reset the recorder and initialize a new test case.

//---------------------------------------------------------------------------

TestRecorder.Recorder = function() {
    this.testcase = new TestRecorder.TestCase();
    this.logfunc = null;
    this.window = null;
    this.iframeName = null;
    //this.useFullPath = options.useFullPath;
    //this.minDuration = options.minDuration;
}

TestRecorder.Recorder.prototype.start = function() {
    this.window = window;
    this.captureEvents();
    // OVERRIDE stopPropagation
    var actualCode = '(' + function() {
        var overloadStopPropagation = Event.prototype.stopPropagation;
        Event.prototype.stopPropagation = function() {
            overloadStopPropagation.apply(this, arguments);
            this.target.dispatchEvent(new MouseEvent('customRecorderEvent', this));
        };
    } + ')();';
    var script = document.createElement('script');
    script.textContent = actualCode;
    (document.head || document.documentElement).appendChild(script);
    script.parentNode.removeChild(script);
}

TestRecorder.Recorder.prototype.stop = function() {
    this.releaseEvents();
    return;
}

TestRecorder.Recorder.prototype.open = function(url) {
    var e = new TestRecorder.OpenURLEvent(url);
    this.testcase.append(e);
    if (debug) console.log('open' + iframeName);
}

TestRecorder.Recorder.prototype.init = function(items) {
    if (items.length > 0)
        this.testcase.items = items;
    if (debug) console.log('init');
}

TestRecorder.Recorder.prototype.pageLoad = function() {
    var doc = recorder.window.document;
    var et = TestRecorder.EventTypes;
    var e = new TestRecorder.DocumentEvent(et.PageLoad, doc);
    this.testcase.append(e);
    this.log("page loaded url: " + e.url);
}

TestRecorder.Recorder.prototype.captureEvents = function() {
    var wnd = this.window;
    /*
    TestRecorder.Browser.captureEvent(wnd, "drag", this.ondrag);
    TestRecorder.Browser.captureEvent(wnd, "mousedown", this.onmousedown);
    TestRecorder.Browser.captureEvent(wnd, "mouseup", this.onmouseup);
    TestRecorder.Browser.captureEvent(wnd, "keypress", this.onkeypress);
    TestRecorder.Browser.captureEvent(wnd, "keydown", this.onkeydown);
    TestRecorder.Browser.captureEvent(wnd, "select", this.onselect);
    TestRecorder.Browser.captureEvent(wnd, "submit", this.onsubmit);
    TestRecorder.Browser.captureEvent(wnd, "click", this.onclick);
    TestRecorder.Browser.captureEvent(wnd, "change", this.onchange);
    */

    //document.addEventListener("mousedown", this.onmousedown);
    //document.addEventListener("mouseup", this.onmouseup);
    document.addEventListener("click", this.onclick);
    document.addEventListener("keypress", this.onkeypress);
    document.addEventListener("keydown", this.onkeydown);
    document.addEventListener("paste", this.onpaste);
    document.addEventListener("customRecorderEvent", this.oncustomevent);

}

TestRecorder.Recorder.prototype.releaseEvents = function() {
    var wnd = this.window;
    /*
    TestRecorder.Browser.releaseEvent(wnd, "drag", this.ondrag);
    TestRecorder.Browser.releaseEvent(wnd, "mousedown", this.onmousedown);
    TestRecorder.Browser.releaseEvent(wnd, "mouseup", this.onmouseup);
    TestRecorder.Browser.releaseEvent(wnd, "keypress", this.onkeypress);
    TestRecorder.Browser.releaseEvent(wnd, "keydown", this.onkeydown);
    TestRecorder.Browser.releaseEvent(wnd, "select", this.onselect);
    TestRecorder.Browser.releaseEvent(wnd, "submit", this.onsubmit);
    TestRecorder.Browser.releaseEvent(wnd, "click", this.onclick);
    TestRecorder.Browser.releaseEvent(wnd, "change", this.onchange);
    */

    //document.removeEventListener("mousedown", this.onmousedown);
    //document.removeEventListener("mouseup", this.onmouseup);
    document.removeEventListener("click", this.onclick);
    document.removeEventListener("keypress", this.onkeypress);
    document.removeEventListener("keydown", this.onkeydown);
    document.removeEventListener("paste", this.onpaste);
    document.removeEventListener("customRecorderEvent", this.oncustomevent);
}

TestRecorder.Recorder.prototype.clickaction = function(e) {
    // This method is called by our low-level event handler when the mouse 
    // is clicked in normal mode. Its job is decide whether the click is
    // something we care about. If so, we record the event in the test case.
    //
    var et = TestRecorder.EventTypes;
    var t = e.target();
    var el = new TestRecorder.ElementEvent(et.Click, e.target());
    var elData = null;

    if (t.type && t.type == "checkbox" || t.type && t.type == "radio") {
        elData = new TestRecorder.KeyEvent(e.target(), t.value);
    }
    var addNewEvent = true;
    var last = recorder.testcase.peek();
    if (last != undefined && last.type == el.type && (el.eventStart - last.eventStart) < 1000) {
        addNewEvent = false;
    }
    if (addNewEvent) recorder.testcase.append(el);
    if (elData != null) recorder.testcase.append(elData);
}

TestRecorder.Recorder.prototype.check = function(e) {
    // This method is called by our low-level event handler when the mouse 
    // is clicked in check mode. Its job is decide whether the click is
    // something we care about. If so, we record the check in the test case.
    var target = e.target();
    if (target.type) {
        var type = target.type.toLowerCase();
        if (type == "submit" || type == "button" || type == "image") {
            recorder.log('check button == "' + target.value + '"');
        }
    } else if (target.href) {
        if (target.innerText) {
            var text = recorder.strip(target.innerText);
            recorder.log('check link == "' + target.text + '"');
        }
    }
}

TestRecorder.Recorder.prototype.onchange = function(e) {
    var e = new TestRecorder.Event(e);
    var et = TestRecorder.EventTypes;
    var v = new TestRecorder.ElementEvent(et.Change, e.target(), e.target().value);
    recorder.testcase.append(v);
    recorder.log("value changed: " + e.target().value);
}

TestRecorder.Recorder.prototype.onselect = function(e) {
    var e = new TestRecorder.Event(e);
    recorder.log("select: " + e.target());
}

TestRecorder.Recorder.prototype.onsubmit = function(e) {
    var e = new TestRecorder.Event(e);
    var et = TestRecorder.EventTypes;
    // We want to save the form element as the event target
    var t = e.target();
    while (t.parentNode && t.tagName != "FORM") {
        t = t.parentNode;
    }
    var v = new TestRecorder.ElementEvent(et.Submit, t);
    recorder.testcase.append(v);
    recorder.log("submit: " + e.target());
}

TestRecorder.Recorder.prototype.onmousedown = function(e) {
    var e = new TestRecorder.Event(e);
    if (e.button() == TestRecorder.Event.LeftButton) {
        var el = new TestRecorder.ElementEvent(TestRecorder.EventTypes.MouseDown, e.target());
        recorder.testcase.append(el);

    }
}

TestRecorder.Recorder.prototype.onmouseup = function(e) {
    var e = new TestRecorder.Event(e);
    if (e.button() == TestRecorder.Event.LeftButton) {
        var last = recorder.testcase.peek();
        if (last.type == TestRecorder.EventTypes.MouseDown) {

        }
    }
}

/*
//The dance here between onclick and oncontextmenu requires a bit of 
//explanation. IE and Moz/Firefox have wildly different behaviors when 
//a right-click occurs. IE6 fires only an oncontextmenu event; Firefox 
//gets an onclick event first followed by an oncontextment event. So 
//to do the right thing here, we need to silently consume oncontextmenu
//on Firefox, and reroute oncontextmenu to look like a click event for 
//IE. In both cases, we need to prevent the default action for cmenu.
*/

TestRecorder.Recorder.prototype.onclick = function(e) {
    var e = new TestRecorder.Event(e);
    if (e.button() == TestRecorder.Event.LeftButton) {
        recorder.clickaction(e);
    }
    return true;
}


TestRecorder.Recorder.prototype.oncustomevent = function(e) {
    var evt = new TestRecorder.Event(e);
    if (evt.button() == TestRecorder.Event.LeftButton && (e.x != 0 && e.y != 0)) {
        recorder.clickaction(evt);
    }
    return true;
}

TestRecorder.Recorder.prototype.onkeypress = function(e) {
    var e = new TestRecorder.Event(e);
    var et = TestRecorder.EventTypes;
    var code = e.event.keyCode || e.event.which;
    var last = recorder.testcase.peek();
    if (last.type == TestRecorder.EventTypes.KeyPress) {
        var lkey = last.text;

        if (lkey.substr(-1) == e.keychar() && (e.eventStart - last.eventStart) < 50) {
            return false;
        }
        if (debug) {
            console.log('keypress ' + e.keychar() + ' ' + e.eventStart);
            console.log('keypress equal to previous ' + (lkey.substr(-1) == e.keychar()));
            console.log('keypress time diff ' + (e.eventStart - last.eventStart));
        }
        last.text = last.text + e.keychar();
        last.eventStart = (new Date()).getTime();
        recorder.testcase.poke(last);
    } else {
        recorder.testcase.append(
            new TestRecorder.KeyEvent(e.target(), e.keychar())
        );
    }
    return false;
}

TestRecorder.Recorder.prototype.onkeydown = function(e) {
    var e = new TestRecorder.Event(e);
    var code = e.event.keyCode || e.event.which;
    if (code == 9) {
        recorder.testcase.append(
            new TestRecorder.TabEvent(e.target(), e.keychar())
        );
    }
    var last = recorder.testcase.peek();
    return true;
}

TestRecorder.Recorder.prototype.onpaste = function(e) {
    var text = e.clipboardData.getData('Text');
    var e = new TestRecorder.Event(e);
    var el = new TestRecorder.ElementEvent(TestRecorder.EventTypes.Paste, e.target(), text);
    recorder.testcase.append(el);
    
}

TestRecorder.Recorder.prototype.strip = function(s) {
    return s.replace('\n', ' ').replace(/^\s*/, "").replace(/\s*$/, "");
}

TestRecorder.Recorder.prototype.log = function(text) {
    if (this.logfunc) {
        this.logfunc(text);
    }
}

//Detect if this iframe or not
var isIframe = false;
var iframeName = null;
try {
    isIframe = window.self !== window.top;
} catch (e) {
    isIframe = true;
}
if (isIframe && window.name.length < 256) {
    iframeName = window.name;
}

var recorder = null;

// chrome.runtime.onMessage.addListener(
//     function(request, sender, sendResponse) {


//     });