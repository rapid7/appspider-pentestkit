(function websocket_handler() {
    var nativeWebSocket = window.WebSocket;
    var requests = window.requestLog = {};
    var WebSocket = window.WebSocket = function(uri) {
        console.log('new WebSocket created', uri);
        this.websocket = new nativeWebSocket(uri);
        this.websocket.onopen = this.onOpen.bind(this);
        this.websocket.onclose = this.onClose.bind(this);
        this.websocket.onmessage = this.onMessage.bind(this);
        this.listeners = { onmessage: null, onopen: null };

        if (!window._openWebSockets) window._openWebSockets = [];
        window._openWebSockets.push(this);
    };
    WebSocket.prototype.send = function(msg) {
        console.log('>>', msg);
        window.postMessage({
                channel: 'ptkWSToContent',
                type: "send",
                message: msg
            },
            '*');
        this.websocket.send.apply(this.websocket, arguments);
    }
    WebSocket.prototype.onOpen = function(e) {
        console.log('OPEN', arguments);
        window.postMessage({
                channel: 'ptkWSToContent',
                type: "open",
                message: JSON.parse(JSON.stringify(arguments))
            },
            '*');
        this.listeners.onopen(e);
    }
    WebSocket.prototype.onClose = function(e) {
        console.log('CLOSE', arguments);
        window.postMessage({
                channel: 'ptkWSToContent',
                type: "close",
                message: JSON.parse(JSON.stringify(arguments))
            },
            '*');
        this.listeners.onclose(e);
    }
    WebSocket.prototype.onMessage = function(e) {
        console.log('<<', e.data);
        window.postMessage({
                channel: 'ptkWSToContent',
                type: "recieve",
                message: e.data
            },
            '*');
        this.listeners.onmessage(e);
    }
    Object.defineProperty(WebSocket.prototype, 'readyState', {
        get: function() {
            return this.websocket.readyState;
        }
    });
    Object.defineProperty(WebSocket.prototype, 'onopen', {
        get: function() {
            return this.listeners.onopen;
        },
        set: function(fn) {
            this.listeners.onopen = fn;
        }
    });
    Object.defineProperty(WebSocket.prototype, 'onclose', {
        get: function() {
            return this.websocket.onclose;
        },
        set: function(fn) {
            this.websocket.onclose = fn;
        }
    });
    Object.defineProperty(WebSocket.prototype, 'onmessage', {
        get: function() {
            return this.listeners.onmessage;
        },
        set: function(fn) {
            this.listeners.onmessage = fn;
        }
    });
    Object.defineProperty(WebSocket.prototype, 'onerror', {
        get: function() {
            return this.websocket.onerror;
        },
        set: function(fn) {
            this.websocket.onerror = fn;
        }
    });
})();