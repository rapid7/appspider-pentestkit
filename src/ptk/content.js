/* Author: Denis Podgurskii */

browser.runtime.onMessage.addListener(function (message, sender, sendResponse) {

    if (message.channel == "ptk_popup2content" && message.type == "init") {

        // HTML
        let html = new XMLSerializer().serializeToString(document)

        // Discard the middle portion of HTML to avoid performance degradation on large pages
        const chunks = []
        const maxCols = 2000
        const maxRows = 3000
        const rows = html.length / maxCols

        for (let i = 0; i < rows; i += 1) {
            if (i < maxRows / 2 || i > rows - maxRows / 2) {
                chunks.push(html.slice(i * maxCols, (i + 1) * maxCols))
            }
        }
        html = chunks.join('')

        // CSS rules
        let css = []

        try {
            for (const sheet of Array.from(document.styleSheets)) {
                for (const rules of Array.from(sheet.cssRules)) {
                    css.push(rules.cssText)

                    if (css.length >= 3000) {
                        break
                    }
                }
            }
        } catch (error) {
            // Continue
        }
        css = css.join('\n')

        // Script tags
        const scripts = Array.from(document.scripts)
            .filter(({ src }) => src)
            .map(({ src }) => src)
            .filter((script) => script.indexOf('data:text/javascript;') !== 0)

        // Meta tags
        const meta = Array.from(document.querySelectorAll('meta')).reduce(
            (metas, meta) => {
                const key = meta.getAttribute('name') || meta.getAttribute('property')

                if (key) {
                    metas[key.toLowerCase()] = [meta.getAttribute('content')]
                }
                return metas
            },
            {}
        )


        const dom = message.dom
            .reduce((technologies, { name, dom }) => {
                const toScalar = (value) =>
                    typeof value === 'string' || typeof value === 'number'
                        ? value
                        : !!value

                Object.keys(dom).forEach((selector) => {
                    const nodes = document.querySelectorAll(selector)

                    if (!nodes.length) {
                        return
                    }

                    dom[selector].forEach(({ text, properties, attributes }) => {
                        nodes.forEach((node) => {
                            if (text) {
                                const value = node.textContent.trim()

                                if (value && !technologies.find(item => item.name == name)) {
                                    technologies.push({
                                        name,
                                        selector,
                                        text: value,
                                    })
                                }
                            }

                            if (properties) {
                                Object.keys(properties).forEach((property) => {
                                    if (Object.prototype.hasOwnProperty.call(node, property)) {
                                        const value = node[property]

                                        if (typeof value !== 'undefined' && !technologies.find(item => item.name == name)) {
                                            technologies.push({
                                                name,
                                                selector,
                                                property,
                                                value: toScalar(value),
                                            })
                                        }
                                    }
                                })
                            }

                            if (attributes) {
                                Object.keys(attributes).forEach((attribute) => {
                                    if (node.hasAttribute(attribute) && !technologies.find(item => item.name == name)) {
                                        const value = node.getAttribute(attribute)

                                        technologies.push({
                                            name,
                                            selector,
                                            attribute,
                                            value: toScalar(value),
                                        })
                                    }
                                })
                            }
                        })
                    })
                })

                return technologies
            }, [])



        // let js = message.dom.reduce((technologies, { name, chains }) => {
        //     chains.forEach((chain) => {
        //         const value = chain
        //             .split('.')
        //             .reduce(
        //                 (value, method) =>
        //                     value &&
        //                         value instanceof Object &&
        //                         Object.prototype.hasOwnProperty.call(value, method)
        //                         ? value[method]
        //                         : undefined,
        //                 window
        //             )

        //         if (value !== undefined) {
        //             technologies.push({
        //                 name,
        //                 chain,
        //                 value:
        //                     typeof value === 'string' || typeof value === 'number'
        //                         ? value
        //                         : !!value,
        //             })
        //         }
        //     })

        //     return technologies
        // }, [])

        let auth = {
            localStorage: JSON.stringify(window.localStorage),
            sessionStorage: JSON.stringify(window.sessionStorage)
        }

        browser.runtime.sendMessage({
            channel: "ptk_content2popup",
            type: "init",
            data: { html: html, meta: meta, scripts: scripts, css: css, auth: auth, dom: dom }
        }).catch(e => e)

        return Promise.resolve({ html: html, meta: meta, scripts: scripts, css: css, auth: auth, dom: dom })
    }
})