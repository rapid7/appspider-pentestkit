/* Author: Denis Podgurskii */
'use strict';

function Recorder() {
    this.active = false;
    this.injectJS = "assets/js/recorder/recorder.js";
    this.tabId = null;
    this.openerTabId = null;
    this.senderTabId = null;
    this.items = [];
    this.action = null;
    this.startUrl = null;
    this.useFullPath = false;
    this.minDuration = 4000;
    this.elementPath = "id"; // fullpath/javascript
    //traffic recording
    this.requests = [];
    this.captureNetwork = true;
    this.cleanCookie = false;
}

Recorder.prototype.process = function(data) {
    this.action = null;
    this.senderTabId = data.senderTabId;
    switch (data.function) {
        case 'start':
            if (!this.active) {

                var url = data.start_url;

                /* Get data from the storage sync */
                this.items = [];
                this.active = true;
                this.startUrl = url;
                this.openerTabId = data.senderTabId;
                this.requests = [];

                var domain = (new URL(url)).hostname;
                if (this.cleanCookie) {
                    chrome.cookies.getAll({ domain: domain }, function(cookies) {
                        var domain = (new URL(url)).hostname;
                        for (var i = 0; i < cookies.length; i++) {
                            chrome.cookies.remove({ url: url + cookies[i].path, name: cookies[i].name });
                        }
                    });
                }
                setTimeout(function() {
                    chrome.windows.create({ url: data.start_url, type: "popup" },
                        function(win) {
                            this.tabId = win.tabs[0].id;
                            BackgroundProxy.Recorder.tabId = this.tabId;


                            //Attach debugger
                            var version = "1.3";
                            var debugTarget = { tabId: BackgroundProxy.Recorder.tabId };
                            chrome.debugger.attach(debugTarget, version,
                                BackgroundProxy.Recorder.onAttach(null, BackgroundProxy.Recorder.tabId)
                            );
                            chrome.debugger.sendCommand(debugTarget, "Network.setCacheDisabled", { cacheDisabled: true });
                            chrome.debugger.sendCommand(debugTarget, "Network.enable");

                            BackgroundProxy.Recorder.action = { action: "open", 'url': url };
                            alert("You are now recording your macro/traffic sequence.");


                        });
                }, 100);
            } else {
                alert("Stop recording before start a new one.");
            }
            break;
        case 'stop':
            this.captureNetwork = false;
            this.active = false;
            this.tabId = null;
            break;
        case 'export':
            if (this.tabId != null) {
                chrome.tabs.remove(this.tabId);
            }
            this.captureNetwork = false;
            this.active = false;
            this.tabId = null;
            break;
        case 'reset':
            this.items.length = 0;
            this.requests.length = 0;
            break;
        case 'append':
            this.items = data.items;
            break;
        default:
            break;

    }
}

Recorder.prototype.onAttach = function(tabId) {
    if (chrome.runtime.lastError) {
        alert(chrome.runtime.lastError.message);
        return;
    }
    chrome.debugger.onEvent.addListener(BackgroundProxy.Recorder.onEvent);
    chrome.debugger.onDetach.addListener(BackgroundProxy.Recorder.onDetach);
}

Recorder.prototype.onDetach = function() {
    //chrome.debugger.sendCommand({tabId: BackgroundProxy._previousTab.tabId}, "Network.setCacheDisabled", { cacheDisabled: false });
    chrome.debugger.onEvent.removeListener(BackgroundProxy.Recorder.onEvent);
    chrome.debugger.onDetach.removeListener(BackgroundProxy.Recorder.onDetach);
}

Recorder.prototype.onEvent = function(debuggeeId, message, params) {

    if (BackgroundProxy.Recorder.tabId != debuggeeId.tabId || !BackgroundProxy.Recorder.captureNetwork)
        return;
    if (params.request && params.request.url && params.request.url.startsWith("chrome-extension://"))
        return;
    if (params.response && params.response.url && params.response.url.startsWith("chrome-extension://"))
        return;


    var item = {
        requestId: params.requestId,
        parentId: params.loaderId,
        wallTime: params.wallTime,
        type: params.type,
        request: [],
        response: [],
        responseBody: { body: "", base64Encoded: false }
    };
    var index = BackgroundProxy.Recorder.requests.findIndex(i => i.requestId === item.requestId);
    var parentIndex = BackgroundProxy.Recorder.requests.findIndex(i => i.requestId === item.parentId);

    var reverseIndex = BackgroundProxy.Recorder.requests.slice().reverse().findIndex(i => i.requestId === item.requestId);
    var count = BackgroundProxy.Recorder.requests.length - 1;
    reverseIndex = reverseIndex >= 0 ? count - reverseIndex : reverseIndex;

    if (message == "Network.requestWillBeSent") {

        if (item.type != "Document" && parentIndex < 0) return;

        item.request = params.request;
        if (params.redirectResponse && index > 0) {
            BackgroundProxy.Recorder.requests[index].response = params.redirectResponse;
        }    
        BackgroundProxy.Recorder.requests.push(item);
        
    } else if (message == "Network.responseReceived") {
        if (reverseIndex >= 0) {
            // console.log('------------RESPONSE----------');
            // console.log(message + " requestId: " + params.requestId);
            // console.log(params);
            // console.log('----------------------');
            BackgroundProxy.Recorder.requests[reverseIndex].response = params.response;
            try {
                chrome.debugger.sendCommand({
                    tabId: BackgroundProxy.Recorder.tabId
                }, "Network.getResponseBody", {
                    "requestId": params.requestId
                }, function(response) {
                    BackgroundProxy.Recorder.requests[reverseIndex].responseBody = response;
                });
            } catch (e) {

            }
        }
    }
}