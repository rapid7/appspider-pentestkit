//Handle appsec products messaging
(function () {
    if (window.AppSecMessagingController || typeof browser === typeof undefined) return

    window.AppSecMessagingController = {
        channelName: null,
        functionCall: null,
        params: null,
        data: null,

        reset: function () {
            this.channelName = null;
            this.functionCall = null;
            this.params = null;
            this.data = null;
        },

        process: function (message) {
            this.channelName = message.channelName;
            this.functionCall = message.data['function'];
            this.params = message.data['parameters'];
            this.data = message.data;

            if (this.functionCall == 'getVersion') {
                this.processGetVersion();
            }

            if (this.channelName == 'AppSpiderMacro') {
                this.processAppSecMacro();
            }

            if (this.channelName == 'pentestkitAppSpiderValidateChannel' || this.functionCall == 'runValidate') {
                this.processAppSecValidate();
            }

            if (this.channelName == 'AppSpiderBootstrap') {
                this.processAppSecBootstrap();
            }
        },

        processGetVersion: function () {
            var manifest = browser.runtime.getManifest();
            if (manifest && manifest.version) {
                var event = document.createEvent("CustomEvent");
                event.initCustomEvent(this.params['eventName'], true, true, { 'version': manifest.version });
                document.dispatchEvent(event);
            }
        },

        //AppSec recorder support
        processAppSecMacro: function () {
            switch (this.functionCall) {
                case 'start':
                    browser.runtime.sendMessage({
                        channel: "ptk_popup2background_recorder",
                        type: "start_recording",
                        clean_cookie: true,
                        url: this.data.start_url
                    }).catch(e => e)
                    break;
                case 'stop':
                    browser.runtime.sendMessage({
                        channel: "ptk_popup2background_recorder",
                        type: "stop_recording"
                    }).catch(e => e)
                    break;
                case 'export':
                    var exportId = this.data.exportId
                    browser.runtime.sendMessage({
                        channel: "ptk_popup2background_recorder",
                        type: "export_recording",
                        settings: {
                            format: "xml", // [xml, side, html, har]
                            min_duration: 3000,
                            element_path: "id", //[id, fullpath]
                            event_type: "driverclick", //[javascript, driverclick, onclick ]
                        }
                    }).then(function (response) {
                        document.getElementById(exportId).value = response.result
                    }).catch(e => e)
                    break;
            }
        },

        //AppSec validate support
        processAppSecValidate: function () {
            browser.runtime.sendMessage({
                channel: "ptk_popup2background_request",
                type: "validate",
                parameters: encodeURIComponent(this.params.encoded_http_request)
            }).catch(e => e)
        },

        processAppSecBootstrap: function () {
            switch (this.functionCall) {
                case 'startListening':
                    if (this.params.start_url && this.params.jobID && this.params.restAPI) {
                        let bootstrap = {
                            bootstrapJobID: this.params.jobID,
                            bootstrapEndpoint: this.params.restAPI,
                            bootstrapPutParams: this.params.putParams,
                            bootstrapUsePut: this.params.usePut
                        }
                        browser.runtime.sendMessage({
                            channel: "ptk_popup2background_recorder",
                            type: "start_recording",
                            clean_cookie: true,
                            url: this.params.start_url,
                            bootstrap: bootstrap
                        }).catch(e => e)
                    }
                    break;
                case 'stopListening': //IAS - stop and send traffic
                case 'sendTraffic': //ASE stop only, traffic sent on sendTraffic
                    browser.runtime.sendMessage({
                        channel: "ptk_popup2background_recorder",
                        type: "stop_recording"
                    }).then(function (response) {
                        if (response.success && response.bootstrap) {
                            if (response.bootstrap.bootstrapUsePut) {
                                browser.runtime.sendMessage({
                                    channel: "ptk_popup2background_recorder",
                                    type: "export_recording",
                                    settings: {
                                        format: "har"
                                    }
                                }).then(function (response) {
                                    var data = new FormData();
                                    data.append(
                                        'binaryContent',
                                        new File(
                                            [response.result],
                                            response.bootstrap.bootstrapPutParams.fileName
                                        )
                                    );
                                    var xhr = new XMLHttpRequest();
                                    xhr.open('PUT', response.bootstrap.bootstrapEndpoint, true);
                                    if (response.bootstrap.bootstrapPutParams.headers) {
                                        for (var key in response.bootstrap.bootstrapPutParams.headers) {
                                            xhr.setRequestHeader(key, response.bootstrap.bootstrapPutParams.headers[key]);
                                        }
                                    }
                                    xhr.onreadystatechange = function (e) {
                                        if (4 == this.readyState) {
                                            window.postMessage({
                                                channelName: "AppSpiderBootstrap",
                                                message: 'COMPLETE'
                                            }, '*');
                                        }
                                    };
                                    xhr.onerror = function () {
                                        window.postMessage({
                                            channelName: "AppSpiderBootstrap",
                                            message: 'FAILED',
                                            error: new TypeError('Network request failed')
                                        }, '*');
                                    };
                                    xhr.send(data);
                                }).catch(e => e)

                            } else {
                                browser.runtime.sendMessage({
                                    channel: "ptk_popup2background_recorder",
                                    type: "export_recording",
                                    settings: {
                                        format: "appspider"
                                    }
                                }).then(function (response) {
                                    var formData = new FormData();
                                    formData.append("jobID", response.bootstrap.bootstrapJobID);
                                    formData.append("encodedTraffic", window.btoa(response.result));

                                    var request = new XMLHttpRequest();
                                    request.open("POST", response.bootstrap.bootstrapEndpoint);
                                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
                                    request.send("jobID=" + response.bootstrap.bootstrapJobID + "&encodedTraffic=" + window.btoa(response.result));
                                }).catch(e => e)
                            }
                        }

                        browser.runtime.sendMessage({
                            channel: "ptk_popup2background_recorder",
                            type: "reset_recording"
                        }).catch(e => e)
                    }).catch(e => e)

                    break;
                default:
                    break;
            }
        }
    }


    /*
    --------------------------------------------------
    Backward compatibility with previous AppSec plugin
    --------------------------------------------------
    */

    window.addEventListener("message", function (event) {
        var message = event.data;
        if (message.messageType == 'AppSpiderMessage') {
            window.AppSecMessagingController.process(message)
            setTimeout(function () {
                window.AppSecMessagingController.reset()
            }, 100)
        }
    })

    let appScript = document.createElement('script')
    let cmd = `
(function(){

    appletStart = function (e, szConnection, refAltValidate, bAbsolutelyNeedsApplet, szProtocol, nPort, szHTTPRequests) {
        var message = {
            messageType: 'AppSpiderMessage',
            channelName: 'pentestkitAppSpiderValidateChannel',
            data: {
                function: 'validate',
                parameters: { encoded_http_request: encodeURIComponent(szHTTPRequests) }
            }
        };
        window.postMessage(message, '*');
    }

}());`
    appScript.textContent = cmd;
    (document.head || document.documentElement).appendChild(appScript);
    appScript.remove();


    if (document?.head?.childNodes[1]?.httpEquiv === "NTORender-Type") {
        var validateBtnNodeList = document.querySelectorAll('[src="images/button_validate.png"]');
        for (var i = 0; i < validateBtnNodeList.length; i++) {
            var item = validateBtnNodeList[i],
                cloneItem = item.cloneNode(true);
            item.parentNode.replaceChild(cloneItem, item);
        }
    }


    if (document?.head?.innerHTML?.indexOf('AppSpiderEnterprise')) {
        var validateBtnNodeList = document.querySelectorAll('button.ValidateApplet');
        for (var i = 0; i < validateBtnNodeList.length; i++) {
            var item = validateBtnNodeList[i],
                cloneItem = item.cloneNode(true);
            item.parentNode.replaceChild(cloneItem, item);
        }
    }
}())


