/* Author: Denis Podgurskii */

import { ptk_settings } from "./settings.js"
import { ptk_recorder } from "./recorder.js"
import { ptk_request } from "./request.js"
import { ptk_tabs } from "./tab.js"
import { ptk_rattacker } from "./rattacker.js"
import { ptk_integration } from "./integration.js"

export class ptk_app {
    constructor() {
        browser.storage.local.get('pentestkit_settings').then(function (result) {
            this.settings = new ptk_settings()
            if (result.pentestkit_settings) {
                this.settings.mergeSettings(result.pentestkit_settings)
            }

            this.recorder = new ptk_recorder()
            this.recorder.addMessageListeners()

            this.request = new ptk_request()
            this.request.addMessageListeners()

            if (this.settings.tabs?.enable) {
                this.tabs = new ptk_tabs(
                    this.settings.tabs.max_tabs,
                    this.settings.tabs.max_requests_per_tab,
                    this.settings.tabs.tabs_capturing
                )
            }

            if (this.settings.rattacker?.enable) {
                this.rattacker = new ptk_rattacker()
                this.rattacker.addMessageListeners()
            }

            this.integration = []
            if (this.settings.integration) {
                Object.keys(this.settings.integration).forEach((key) => {
                    let s = this.settings.integration[key]
                    if (s.enable) {
                        this.integration[key] = new ptk_integration(s.content_script, s.channel)
                    }
                })
            }

            this.filterType = ["main_frame", "sub_frame", "stylesheet", "script", "image", "font", "object", "xmlhttprequest", "ping", "csp_report", "media", "websocket", "other"]
            this.extraHeaders = window.isFirefox ? [] : ["extraHeaders"]
            this.addMessageListeners()
            this.addContextMenu()
        }.bind(this))
    }

    addMessageListeners() {
        browser.runtime.onMessage.addListener(function (message, sender, sendResponse) {
            if (message.channel == "ptk_popup2background_app") {
                if (message.type == "on_updated_settings") {

                    if (this.tabs) {
                        this.tabs.maxTabsCount = this.settings.tabs.max_tabs
                        this.tabs.maxRequestsPerTab = this.settings.tabs.max_requests_per_tab
                        this.tabs.isTabsCapturingActive = this.settings.tabs.tabs_capturing
                    }

                    window.ptk_debug = this.settings.main.enable_logging

                    if (this.settings.integration) {
                        Object.keys(this.settings.integration).forEach((key) => {
                            let s = this.settings.integration[key]
                            if (s.enable) {
                                this.integration[key] = new ptk_integration(s.content_script, s.channel)
                            }
                        })
                    }
                }
                if (message.type == "tabs_restart") {
                    if (this.settings.tabs?.enable) {
                        this.tabs = new ptk_tabs(
                            this.settings.tabs.max_tabs,
                            this.settings.tabs.max_requests_per_tab,
                            this.settings.tabs.tabs_capturing
                        )
                    }
                }
            }
        }.bind(this))
    }

    addContextMenu() {
        browser.contextMenus.create({ id: "ptk_context_menu", title: "PTK", contexts: ["all"] })
        browser.contextMenus.create({ id: "ptk_context_menu_recording", parentId: "ptk_context_menu", title: "Record", contexts: ["all"] })
        browser.contextMenus.create({ id: "ptk_context_menu_recording_start", parentId: "ptk_context_menu_recording", title: "Start recording on this page", contexts: ["all"] })
        browser.contextMenus.create({ id: "ptk_context_menu_recording_stop", parentId: "ptk_context_menu_recording", title: "Stop recording", contexts: ["all"] })


        browser.contextMenus.create({ id: "ptk_context_menu_scan", parentId: "ptk_context_menu", title: "Scan", contexts: ["all"] })
        browser.contextMenus.create({ id: "ptk_context_menu_scan_active", parentId: "ptk_context_menu_scan", title: "Run active scan", contexts: ["all"] })
        browser.contextMenus.create({ id: "ptk_context_menu_scan_passive", parentId: "ptk_context_menu_scan", title: "Run passive scan", contexts: ["all"] })
        browser.contextMenus.create({ id: "ptk_context_menu_scan_stop", parentId: "ptk_context_menu_scan", title: "Stop scan", contexts: ["all"] })



    }
}

