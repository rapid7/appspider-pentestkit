/* Author: Denis Podgurskii */
import { ptk_controller_rattacker } from "./controller/rattacker.js"
import { ptk_controller_requestbuilder } from "./controller/requestbuilder.js"
const controller = new ptk_controller_rattacker()
const request_controller = new ptk_controller_requestbuilder()

function escapeHtml(unsafe) {
    unsafe = unsafe.replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;")
    return unsafe
}

jQuery(function () {

    $(document).on("click", ".run_scan", function () {
        let formId = $(this).closest('.ui.tab.active').attr('id'),
            $form = $('#' + formId + ' #request_form'),
            values = $form.form('get values')
        $("#attacks_info").html("")
        request_controller.parseRawRequest(values).then(function (schema) {
            controller.runScan(schema).then(function (response) { })
        })
        return false
    })

    $(document).on("bind_stats", function (e, scanResult) {
        $('#attacks_count').text(scanResult.stats.attacksCount)
        $('#vulns_count').text(scanResult.stats.vulnsCount)
        return false
    })

    $('#filter_all').on("click", function () {
        $('.attack_info').show()
        $('#filter_vuln').removeClass('active')
        $('#filter_all').addClass('active')
    })

    $('#filter_vuln').on("click", function () {
        $('.attack_info.nonvuln').hide()
        $('#filter_all').removeClass('active')
        $('#filter_vuln').addClass('active')
    })


    $(document).on("bind_attack", function (e, info) {
        let icon = '', proof = '', attackClass = 'nonvuln'
        if (info.success) {
            attackClass = 'vuln success visible'
            icon = '<div ><i class="exclamation triangle red icon" ></i><b>Vulnerability detected</b></div>'
            proof = `<div class="description"><p>Proof: <b><i name="proof">${escapeHtml(atob(info.proof))}</i></b></p></div>`
        }
        let item = `
                    <div class="ui medium message attack_info ${attackClass}" style="position:relative;    margin-top: 0;">
                    ${icon}
                    <div class="description">
                        <p>Attack: ${escapeHtml(info.attack.description)}</p>
                    </div>
                    <div class="description">
                        <p>URL: <a href="${info.baseUrl}" target="_blank">${info.baseUrl}</a></p>
                    </div>
                    ${proof}
                    <div class="ui left floated">
                    <input type="hidden" name="request" value="${info.request}" />
                    <input type="hidden" name="proof" value="${info.proof}" />
                    <input type="hidden" name="headers" value="${info.headers}" />
                    <input type="hidden" name="body" value="${info.body}" />
                        <a href="#" class="attack_details">Details</a>
                    </div>
                    </div>`
        $("#attacks_info").append(item)
        return false
    })


    $(document).on("click", ".reset", function () {
        $("#attacks_info").html("")
        controller.reset().then(function (result) {
            $(document).trigger("bind_stats", result.scanResult)
        })
    })


    $.fn.selectRange = function (start, end) {
        var e = document.getElementById($(this).attr('id')); // I don't know why... but $(this) don't want to work today :-/
        if (!e) return;
        else if (e.setSelectionRange) { e.focus(); e.setSelectionRange(start, end); } /* WebKit */
        else if (e.createTextRange) { var range = e.createTextRange(); range.collapse(true); range.moveEnd('character', end); range.moveStart('character', start); range.select(); } /* IE */
        else if (e.selectionStart) { e.selectionStart = start; e.selectionEnd = end; }
    };

    $(document).on("click", ".attack_details", function () {


        let proof = atob($(this).parent().find('[name="proof"]').val()).trim()
        let body = atob($(this).parent().find('[name="headers"]').val()).trim() + "\r\n\r\n" + atob($(this).parent().find('[name="body"]').val()).trim()

        $('#raw_request').val(atob($(this).parent().find('[name="request"]').val()).trim())
        $('#raw_response').val(body)

        $('#attack_details').modal('show')
        let index = $('#raw_response').val().indexOf(proof)
        if (index > -1) {
            let text = $('#raw_response').val()
            let textBeforePosition = text.substr(0, index)
            $('#raw_response').trigger('blur')
                .val(textBeforePosition)
                .trigger('focus')
                .val(text)
                .trigger('scroll')
                .selectRange(index, index + proof.length)
            $('#raw_response').scrollTop(($('#raw_response').scrollTop() + $('#raw_response').height() / 2))
        }
        return false;
    })

    $(document).on("init_request", function (e, request, formId) {
        if (request && request.requestHeaders) {

            let $form = $('#' + formId + ' #request_form')

            let path = request.method + ' ' + request.url + ' HTTP/1.1'
            let headersStr = path + '\n' + request.requestHeaders.map(x => x.name + ": " + x.value).join('\n')

            if (request?.requestBody?.formData) {
                let params = Object.keys(request.requestBody.formData).map(function (k) {
                    return encodeURIComponent(k) + '=' + encodeURIComponent(request.requestBody.formData[k])
                }).join('&')
                headersStr += "\n\n" + params
            } else if (request?.requestBody?.raw) {
                headersStr += "\n\n" + request.requestBody.raw
            }

            $form.form('set values', {
                'request': headersStr,
            })
        }
    })

    let params = new URLSearchParams(window.location.search)
    if (params.has('requestDetails')) {
        let request = JSON.parse(decodeURIComponent(atob(params.get('requestDetails'))))
        $(document).trigger("init_request", [request, "request_0"])
    } else {
        controller.init().then(function (result) {
            if (result.scanResult) {
                let formId = $(document).find('.ui.tab.active').attr('id'),
                    $form = $('#' + formId + ' #request_form')
                $form.form('set value', 'request', result.scanResult.request)
                $(document).trigger("bind_stats", result.scanResult)

                for (let i = 0; i < result.scanResult.items.length; i++) {
                    $(document).trigger("bind_attack", result.scanResult.items[i])
                }
            }
        })
    }

})

////////////////////////////////////
/* Chrome runtime events handlers */
////////////////////////////////////
browser.runtime.onMessage.addListener(function (message, sender, sendResponse) {
    if (message.channel == "ptk_background2popup_rattacker") {
        if (message.type == "attack completed") {
            $(document).trigger("bind_stats", message.scanResult)
            $(document).trigger("bind_attack", message.info)
        }
        if (message.type == "attack failed") {
            $('#scan_error_message').text(message.info)
            $('.mini.modal').modal('show')
        }
    }
})