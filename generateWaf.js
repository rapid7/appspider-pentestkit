import { createRequire } from 'module'
import { exit } from 'process';
const require = createRequire(import.meta.url)
var fs = require('fs');


var data =
{
    "categories": {
        "100": {
            "name": "WAF",
            "priority": 1
        }
    },
    "technologies": {}
}

function readFiles(dirname, onFileContent, onError) {
    var fs = require('fs'),
        files = fs.readdirSync(dirname)

    files.forEach(function (file) {
        var content = fs.readFileSync(dirname + file, 'utf8');
        let [name, item] = createItem(content)
        if (name) {
            data.technologies[name] = item

        }
    });
    console.log(data)
    console.log(JSON.stringify(data))
    fs.writeFile('./waf.json', JSON.stringify(data), function (err) {
        if (err) console.log(err);
    })


}



function createItem(content) {

    var nameRegex = /NAME\s?=\s?'(.+)'/,
        headerRegex = /self\.matchHeader\(\((.+),(.+)\)\)/g,
        htmlRegex = /self\.matchContent\(r?'(.+)'\)/g,
        cookieRegex = /self\.matchCookie\(r?'(.+)'\)/g

    if (nameRegex.test(content)) {
        let item = { "cats": [100] }


        let n = nameRegex.exec(content), name = n[1]

        if (headerRegex.test(content)) {
            item["headers"] = {}
            let m = null, re = new RegExp(headerRegex)
            while (m = re.exec(content)) {
                item.headers[m[1].replace(/'/g, "")] = m[2].replace(" r'", '').replace("'", '')
            }
        }

        if (htmlRegex.test(content)) {
            item["html"] = []
            let m = null, re = new RegExp(htmlRegex)
            while (m = re.exec(content)) {
                item.html.push(m[1])
            }
        }

        if (cookieRegex.test(content)) {
            item["cookies"] = {}
            let m = null, re = new RegExp(cookieRegex)
            while (m = re.exec(content)) {
                item.cookies[m[1]] = ""
            }
        }
        return [name, item]
    }
    return [null, null]
}


readFiles("../wafw00f/wafw00f/plugins/")





