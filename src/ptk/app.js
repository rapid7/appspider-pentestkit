/* Author: Denis Podgurskii */

import { app } from "../npm/app.js"
import { ptk_tabs } from "./background/tabs.js"
import { ptk_rattacker } from "./background/rattacker.js"
import { ptk_integration } from "../npm/background/integration.js"


export class ptk_app extends app {
    constructor(settings) {

        super(settings)

        browser.storage.local.get('pentestkit_settings').then(function (result) {

            if (result.pentestkit_settings) {
                this.settings.mergeSettings(result.pentestkit_settings)
            }

            if (this.settings.tabs?.enable) {
                this.tabs = new ptk_tabs(
                    this.settings.tabs.max_tabs,
                    this.settings.tabs.max_requests_per_tab,
                    this.settings.tabs.tabs_capturing
                )
            }

            if (this.settings.rattacker?.enable) {
                this.rattacker = new ptk_rattacker()
                this.rattacker.addMessageListeners()
            }

            this.integration = []
            if (this.settings.integration) {
                Object.keys(this.settings.integration).forEach((key) => {
                    let s = this.settings.integration[key]
                    if (s.enable) {
                        this.integration[key] = new ptk_integration(s.content, s.channel)
                    }
                })
            }

            this.addMessageListeners()
        }.bind(this))
    }

    addMessageListeners() {
        browser.runtime.onMessage.addListener(function (message, sender, sendResponse) {
            if (message.channel == "ptk_popup2background_app") {
                if (message.type == "on_updated_settings") {

                    if (this.tabs) {
                        this.tabs.maxTabsCount = this.settings.tabs.max_tabs
                        this.tabs.maxRequestsPerTab = this.settings.tabs.max_requests_per_tab
                        this.tabs.isTabsCapturingActive = this.settings.tabs.tabs_capturing
                    }

                    window.ptk_debug = this.settings.main.enable_logging

                    if (this.settings.integration) {
                        this.integration = []
                        Object.keys(this.settings.integration).forEach((key) => {
                            let s = this.settings.integration[key]
                            if (s.enable) {
                                this.integration[key] = new ptk_integration(s.content, s.channel)
                            }
                        })
                    }

                    if (this.recorder) {
                        this.recorder.setWindowSize = this.settings.recorder.set_window_size
                        this.recorder.windowHeight = this.settings.recorder.window_height
                        this.recorder.windowWidth = this.settings.recorder.window_width
                    }
                }
                
                if (message.type == "tabs_restart") {
                    if (this.tabs) {
                        this.tabs.removeListener()
                        this.tabs = null
                    }
                    if (this.settings.tabs?.enable) {
                        if (this.tabs) this.tabs.removeListener()
                        this.tabs = new ptk_tabs(
                            this.settings.tabs.max_tabs,
                            this.settings.tabs.max_requests_per_tab,
                            this.settings.tabs.tabs_capturing
                        )
                    }
                }
            }
        }.bind(this))
    }
}


window.isFirefox = browser.runtime.getBrowserInfo ? true : false

fetch(chrome.runtime.getURL('ptk/settings.json'))
    .then(response => response.json())
    .then(settings => {
        window.ptk_app = new ptk_app(settings)
    })


