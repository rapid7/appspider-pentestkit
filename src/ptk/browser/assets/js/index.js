/* Author: Denis Podgurskii */
import { ptk_controller_index } from "../../../controller/index.js"
import { ptk_utils } from "../../../../npm/background/utils.js"
const controller = new ptk_controller_index()

jQuery(function () {



    $('#versionInfo').text(browser.runtime.getManifest().version)

    $("#waf_wrapper").on("click", function () {
        // $("#waf_wrapper").addClass("fullscreen modal")
        // $('#waf_wrapper').modal('show')
    })


    $(document).on("click", ".storage_auth_link", function () {
        let item = this.attributes["data"].textContent
        $(".menu .item").removeClass('active')
        $.tab('change tab', item)
        $("a[data-tab='" + item + "']").addClass('active')
        $('#storage_auth').modal('show')
    })

    $('#main').dimmer('show')
    $('.menu .item').tab()
    //setTimeout(function () { $('#main').dimmer('hide') }, 5000)

    bindTable('#tbl_waf', {})
    bindTable('#tbl_technologies', { "columns": [{ width: "50%" }, { width: "40%" }, { width: "10%" }] })
    bindTable('#tbl_owasp', { "columns": [{ width: "30%" }, { width: "70%" }] })
    bindTable('#tbl_storage', { "columns": [{ width: "90%" }, { width: "10%", className: 'dt-body-center' }] })

    init()

})


/* Helpers */

async function init(){

        controller.init().then(function (result) {
            if (ptk_utils.isURL(controller.url)) {
                bindInfo()
                controller.analyzeTab()
                browser.tabs.sendMessage(controller.tabId, { channel: "ptk_popup2content", type: "init", dom: controller.dom }).catch(e => e)
            } else {
                $('#main').dimmer('hide')
            }
        }).catch(e => { console.log(e) })

}

async function bindInfo() {
    let $form = $('#dashboard_form')
    if (controller.isTabsCapturingActive) {
        $('#dashboard_message_text').text(controller.url)
    } else {
        $('#dashboard_message_text').html(`Tabs capturing disabled. Allow tabs capturing and reload the tab<i class="exclamation red  circle large icon"></i>`)
    }
}

async function bindTechnologies() {
    let dt = new Array()
    if (controller.technologies)
        Object.values(controller.technologies).forEach(item => {
            let link = '<a target="_blank" href="https://www.cvedetails.com/google-search-results.php?q=' + item.name + '+' + item.version + '"><i class="external alternate icon"></i></a>'
            dt.push([item.name, item.version, link])
        })
    let params = { "data": dt, "columns": [{ width: "50%" }, { width: "40%" }, { width: "10%" }] }
    bindTable('#tbl_technologies', params)
}

async function bindOWASP() {
    let dt = controller.findings ? controller.findings : new Array()
    let params = { "data": dt, "columns": [{ width: "30%" }, { width: "70%" }] }
    bindTable('#tbl_owasp', params)
}

async function bindWAF() {
    let dt = new Array()
    if (controller.waf) {
        Object.values(controller.waf).forEach(item => {
            dt.push([item.name])
        })
    }
    let params = { "data": dt }
    bindTable('#tbl_waf', params)
}


async function bindCHT() {
    let dt = new Array()
    let tokens = new Array()
    if (Object.keys(controller.cookies).length) {
        $("a[data-tab='cookie']").show()
        let link = `<a href="#" class="storage_auth_link" data="cookie">View</a>`
        dt.push(['Cookie', link])
        let jwtToken = bindCookie(controller.cookies)
        let decodedToken = ''
        if (jwtToken) {
            try {
                decodedToken = JSON.stringify(parseJwt(jwtToken[1]), null, 4)
            } catch (e) { }
            tokens.push(['cookie', '<pre>' + decodedToken + '</pre>', jwtToken[1]])
        }
    }

    if (Object.keys(controller.requestHeaders).length) {
        $("a[data-tab='headers']").show()
        let link = `<a href="#" class="storage_auth_link" data="headers">View</a>`
        dt.push(['Headers', link])
        let jwtToken = bindHeaders(controller.requestHeaders)
        let decodedToken = ''
        if (jwtToken) {
            try {
                decodedToken = JSON.stringify(parseJwt(jwtToken[1]), null, 4)
            } catch (e) { }
            tokens.push(['headers', '<pre>' + decodedToken + '</pre>', jwtToken[1]])
        }
    }

    if (tokens.length > 0) {
        $("a[data-tab='tokens']").show()
        let link = `<a href="#" class="storage_auth_link" data="tokens">View</a>`
        dt.push(['Tokens', link])
        bindTable('#tbl_tokens', { data: tokens })
    }

    for (let i = 0; i < dt.length; i++) {
        $('#tbl_storage').DataTable().row.add([dt[i][0], dt[i][1]]).draw()
    }

}


async function bindStorage() {
    let dt = new Array()
    Object.keys(controller.wappalyzer.auth).forEach(key => {
        let item = JSON.parse(controller.wappalyzer.auth[key])
        if (Object.keys(item).length > 0 && item[key] != "") {
            $(document).trigger("bind_" + key, item)
            $("a[data-tab='" + key + "']").show()
            let link = `<a href="#" class="storage_auth_link" data="${key}">View</a>`
            dt.push([key, link])
        }
    })
    for (let i = 0; i < dt.length; i++) {
        $('#tbl_storage').DataTable().row.add([dt[i][0], dt[i][1]]).draw()
    }
}

function bindCookie(cookies) {
    let dt = new Array()
    Object.values(cookies).forEach(domain => {
        Object.values(domain).forEach(item => {
            dt.push([item.domain, item.name, item.value, item.httpOnly])
        })
    })
    dt.sort(function (a, b) {
        if (a[0] === b[0]) { return 0; }
        else { return (a[0] < b[0]) ? -1 : 1; }
    })
    var groupColumn = 0;
    let params = {
        data: dt,
        columnDefs: [{
            "visible": false, "targets": groupColumn
        }],
        "order": [[groupColumn, 'asc']],
        "drawCallback": function (settings) {
            var api = this.api();
            var rows = api.rows({ page: 'current' }).nodes();
            var last = null;

            api.column(groupColumn, { page: 'current' }).data().each(function (group, i) {
                if (last !== group) {
                    $(rows).eq(i).before(
                        '<tr class="group" ><td colspan="3"><div class="ui black ribbon label">' + group + '</div></td></tr>'
                    );
                    last = group;
                }
            });
        }
    }

    bindTable('#tbl_cookie', params)
    return JSON.stringify(dt).match(new RegExp('(?:[^"]*token\s?\s?){1}","?([A-Za-z0-9-_]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+]*)"?'))
}

function bindHeaders(headers) {
    let dt = new Array()
    Object.keys(headers).forEach(name => {
        if (name.startsWith('x-') || name == 'authorization' || name == 'cookie') {
            dt.push([name, headers[name][0]])
        }
    })
    let params = {
        data: dt
    }

    bindTable('#tbl_headers', params)
    return JSON.stringify(dt).match(new RegExp('(?:"authorization"),"(.+\s?)?([A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_.]*)"'))
}

function parseJwt(token) {
    var base64Url = token.split('.')[1];
    var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    var jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {
        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
    }).join(''));

    return JSON.parse(jsonPayload);
}

$(document).on("bind_localStorage", function (e, item) {
    if (Object.keys(item).length > 0) {
        let output = JSON.stringify(item, null, 4)
        $('#localStorageText').text(output.replace(/\\r?\\n/g, '<br/>'))
    }
})

$(document).on("bind_sessionStorage", function (e, item) {
    if (Object.keys(item).length > 0) {
        let output = JSON.stringify(item, null, 4)
        $('#sessionStorageText').text(output.replace(/\\r?\\n/g, '<br/>'))
    }
})




/* Chrome runtime events handlers */
browser.runtime.onMessage.addListener(function (message, sender, sendResponse) {
    if (message.channel == "ptk_content2popup" && message.type == "init") {
        controller.wappalyzer = message.data
        controller.complete().then(function () {
            $('#main').dimmer('hide')
            bindTechnologies()
            bindWAF()
            bindStorage()
        })
    }
    if (message.channel == "ptk_background2popup_tabs" && message.type == "analyze_tab") {
        Object.assign(controller, message.data)
        bindOWASP()
        bindCHT()
    }
})

